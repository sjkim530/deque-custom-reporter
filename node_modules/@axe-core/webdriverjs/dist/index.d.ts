import type { WebDriver } from 'selenium-webdriver';
import type { RunOptions, Spec, AxeResults } from 'axe-core';
import type { CallbackFunction, BuilderOptions } from './types';
declare class AxeBuilder {
    private driver;
    private axeSource;
    private includes;
    private excludes;
    private option;
    private config;
    private builderOptions;
    constructor(driver: WebDriver, axeSource?: string | null, builderOptions?: BuilderOptions);
    /**
     * Selector to include in analysis.
     * This may be called any number of times.
     * @param {String} selector
     * @returns {AxeBuilder}
     */
    include(selector: string): AxeBuilder;
    /**
     * Selector to exclude in analysis.
     * This may be called any number of times.
     * @param {String} selector
     * @returns {AxeBuilder}
     */
    exclude(selector: string): AxeBuilder;
    /**
     * Set options to be passed into axe-core
     * @param {RunOptions} options
     * @returns {AxeBuilder}
     */
    options(options: RunOptions): AxeBuilder;
    /**
     * Limit analysis to only the specified rules.
     * Cannot be used with `AxeBuilder#withTags`
     * @param {String|Array} rules
     * @returns {AxeBuilder}
     */
    withRules(rules: string | string[]): AxeBuilder;
    /**
     * Limit analysis to only specified tags.
     * Cannot be used with `AxeBuilder#withRules`
     * @param {String|Array} tags
     * @returns {AxeBuilder}
     */
    withTags(tags: string | string[]): AxeBuilder;
    /**
     * Set the list of rules to skip when running an analysis.
     * @param {String|Array} rules
     * @returns {AxeBuilder}
     */
    disableRules(rules: string | string[]): AxeBuilder;
    /**
     * Set configuration for `axe-core`.
     * This value is passed directly to `axe.configure()`
     * @param {Spec} config
     * @returns {AxeBuilder | Error}
     */
    configure(config: Spec): AxeBuilder;
    /**
     * Performs an analysis and retrieves results.
     * @param {CallbackFunction} callback
     * @returns {Promise<AxeResults>}
     */
    analyze(callback?: CallbackFunction): Promise<AxeResults>;
}
export default AxeBuilder;
