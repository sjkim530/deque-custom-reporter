"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
var express = require("express");
var sinon = require("sinon");
var chromedriver = require("chromedriver");
var testListen = require("test-listen");
var delay_1 = require("delay");
var chai_1 = require("chai");
var path = require("path");
var http_1 = require("http");
var net = require("net");
var json = require('./fixtures/custom-rule-config.json');
var run_webdriver_1 = require("./run-webdriver");
var __1 = require("../");
var connectToChromeDriver = function (port) {
    var socket;
    return new Promise(function (resolve, reject) {
        // Give up after 1s
        var timer = setTimeout(function () {
            socket.destroy();
            reject(new Error('Unable to connect to ChromeDriver'));
        }, 1000);
        var connectionListener = function () {
            clearTimeout(timer);
            socket.destroy();
            return resolve();
        };
        socket = net.createConnection({ host: 'localhost', port: port }, connectionListener);
        // Fail on error
        socket.once('error', function (err) {
            clearTimeout(timer);
            socket.destroy();
            return reject(err);
        });
    });
};
describe('@axe-core/webdriverjs', function () {
    var port = 9515;
    var driver;
    var server;
    var addr;
    before(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    chromedriver.start(["--port=" + port]);
                    return [4 /*yield*/, delay_1.default(500)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, connectToChromeDriver(port)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    after(function () {
        chromedriver.stop();
    });
    beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        var app;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    app = express();
                    app.use(express.static(path.resolve(__dirname, 'fixtures')));
                    server = http_1.createServer(app);
                    return [4 /*yield*/, testListen(server)];
                case 1:
                    addr = _a.sent();
                    driver = run_webdriver_1.default();
                    return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, driver.close()];
                case 1:
                    _a.sent();
                    server.close();
                    return [2 /*return*/];
            }
        });
    }); });
    describe('analyze', function () {
        it('returns results', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/index.html")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new __1.default(driver).analyze()];
                    case 2:
                        results = _a.sent();
                        chai_1.assert.isNotNull(results);
                        chai_1.assert.isArray(results.violations);
                        chai_1.assert.isArray(results.incomplete);
                        chai_1.assert.isArray(results.passes);
                        chai_1.assert.isArray(results.inapplicable);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('configure', function () {
        it('should find configured violations in all iframes', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/outer-configure-iframe.html")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new __1.default(driver)
                                .options({
                                rules: {
                                    'landmark-one-main': { enabled: false },
                                    'page-has-heading-one': { enabled: false },
                                    region: { enabled: false },
                                    'html-lang-valid': { enabled: false },
                                    bypass: { enabled: false }
                                }
                            })
                                .configure(json)
                                .analyze()];
                    case 2:
                        results = _a.sent();
                        chai_1.assert.equal(results.violations[0].id, 'dylang');
                        // the second violation is in a iframe
                        chai_1.assert.equal(results.violations[0].nodes.length, 2);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should find configured violations in all frames', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/outer-configure-frame.html")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new __1.default(driver)
                                .options({
                                rules: {
                                    'landmark-one-main': { enabled: false },
                                    'page-has-heading-one': { enabled: false },
                                    region: { enabled: false },
                                    'html-lang-valid': { enabled: false },
                                    bypass: { enabled: false }
                                }
                            })
                                .configure(json)
                                .analyze()];
                    case 2:
                        results = _a.sent();
                        chai_1.assert.equal(results.violations[0].id, 'dylang');
                        // the second violation is in a frame
                        chai_1.assert.equal(results.violations[0].nodes.length, 2);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('disableRules', function () {
        it('disables the given rules(s) as array', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results, all;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/index.html")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new __1.default(driver)
                                .disableRules(['region'])
                                .analyze()];
                    case 2:
                        results = _a.sent();
                        all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes), results.inapplicable), results.violations), results.incomplete);
                        chai_1.assert.isTrue(!all.find(function (r) { return r.id === 'region'; }));
                        return [2 /*return*/];
                }
            });
        }); });
        it('disables the given rules(s) as string', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results, all;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/index.html")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new __1.default(driver)
                                .disableRules('region')
                                .analyze()];
                    case 2:
                        results = _a.sent();
                        all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes), results.inapplicable), results.violations), results.incomplete);
                        chai_1.assert.isTrue(!all.find(function (r) { return r.id === 'region'; }));
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('iframe tests', function () {
        it('injects into nested iframes', function () { return __awaiter(void 0, void 0, void 0, function () {
            var executeSpy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/nested-iframes.html")];
                    case 1:
                        _a.sent();
                        executeSpy = sinon.spy(driver, 'executeScript');
                        return [4 /*yield*/, new __1.default(driver).analyze()];
                    case 2:
                        _a.sent();
                        /**
                         * Ensure we called execute 4 times
                         * 1. nested-iframes.html
                         * 2. iframes/foo.html
                         * 3. iframes/bar.html
                         * 4. iframes/baz.html
                         */
                        chai_1.assert.strictEqual(executeSpy.callCount, 4);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('frame tests', function () {
        it('injects into nested frames', function () { return __awaiter(void 0, void 0, void 0, function () {
            var executeSpy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/nested-frames.html")];
                    case 1:
                        _a.sent();
                        executeSpy = sinon.spy(driver, 'executeScript');
                        return [4 /*yield*/, new __1.default(driver).analyze()];
                    case 2:
                        _a.sent();
                        /**
                         * Ensure we called execute 4 times
                         * 1. nested-frames.html
                         * 2. frames/foo.html
                         * 3. frames/bar.html
                         * 4. frames/baz.html
                         */
                        chai_1.assert.strictEqual(executeSpy.callCount, 4);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('withRules', function () {
        it('only runs the provided rules as an array', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results, all;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/index.html")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new __1.default(driver)
                                .withRules(['region'])
                                .analyze()];
                    case 2:
                        results = _a.sent();
                        all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes), results.inapplicable), results.violations), results.incomplete);
                        chai_1.assert.strictEqual(all.length, 1);
                        chai_1.assert.strictEqual(all[0].id, 'region');
                        return [2 /*return*/];
                }
            });
        }); });
        it('only runs the provided rules as a string', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results, all;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/index.html")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new __1.default(driver)
                                .withRules('region')
                                .analyze()];
                    case 2:
                        results = _a.sent();
                        all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes), results.inapplicable), results.violations), results.incomplete);
                        chai_1.assert.strictEqual(all.length, 1);
                        chai_1.assert.strictEqual(all[0].id, 'region');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('options', function () {
        it('passes options to axe-core', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results, all;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/index.html")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new __1.default(driver)
                                .options({ rules: { region: { enabled: false } } })
                                .analyze()];
                    case 2:
                        results = _a.sent();
                        all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes), results.inapplicable), results.violations), results.incomplete);
                        chai_1.assert.isTrue(!all.find(function (r) { return r.id === 'region'; }));
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('withTags', function () {
        it('only rules rules with the given tag(s) as an array', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results, all, _i, all_1, rule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/index.html")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new __1.default(driver)
                                .withTags(['best-practice'])
                                .analyze()];
                    case 2:
                        results = _a.sent();
                        all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes), results.inapplicable), results.violations), results.incomplete);
                        chai_1.assert.isOk(all);
                        for (_i = 0, all_1 = all; _i < all_1.length; _i++) {
                            rule = all_1[_i];
                            chai_1.assert.include(rule.tags, 'best-practice');
                        }
                        return [2 /*return*/];
                }
            });
        }); });
        it('only rules rules with the given tag(s) as a string', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results, all, _i, all_2, rule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/index.html")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new __1.default(driver)
                                .withTags('best-practice')
                                .analyze()];
                    case 2:
                        results = _a.sent();
                        all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes), results.inapplicable), results.violations), results.incomplete);
                        chai_1.assert.isOk(all);
                        for (_i = 0, all_2 = all; _i < all_2.length; _i++) {
                            rule = all_2[_i];
                            chai_1.assert.include(rule.tags, 'best-practice');
                        }
                        return [2 /*return*/];
                }
            });
        }); });
        it('No results provided when the given tag(s) is invalid', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results, all;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/index.html")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new __1.default(driver)
                                .withTags(['foobar'])
                                .analyze()];
                    case 2:
                        results = _a.sent();
                        all = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], results.passes), results.inapplicable), results.violations), results.incomplete);
                        // Ensure all run rules had the "foobar" tag
                        chai_1.assert.deepStrictEqual(0, all.length);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('include/exclude', function () {
        it('with include and exclude', function () { return __awaiter(void 0, void 0, void 0, function () {
            var error, builder, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        error = null;
                        return [4 /*yield*/, driver.get(addr + "/context.html")];
                    case 1:
                        _a.sent();
                        builder = new __1.default(driver)
                            .include('.include')
                            .exclude('.exclude');
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, builder.analyze()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        error = e_1;
                        return [3 /*break*/, 5];
                    case 5:
                        chai_1.assert.strictEqual(error, null);
                        return [2 /*return*/];
                }
            });
        }); });
        it('with only include', function () { return __awaiter(void 0, void 0, void 0, function () {
            var error, builder, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        error = null;
                        return [4 /*yield*/, driver.get(addr + "/context.html")];
                    case 1:
                        _a.sent();
                        builder = new __1.default(driver).include('.include');
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, builder.analyze()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        error = e_2;
                        return [3 /*break*/, 5];
                    case 5:
                        chai_1.assert.strictEqual(error, null);
                        return [2 /*return*/];
                }
            });
        }); });
        it('wth only exclude', function () { return __awaiter(void 0, void 0, void 0, function () {
            var error, builder, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        error = null;
                        return [4 /*yield*/, driver.get(addr + "/context.html")];
                    case 1:
                        _a.sent();
                        builder = new __1.default(driver).exclude('.exclude');
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, builder.analyze()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_3 = _a.sent();
                        error = e_3;
                        return [3 /*break*/, 5];
                    case 5:
                        chai_1.assert.strictEqual(error, null);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('callback()', function () {
        it('returns results when callback is provided', function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, driver.get(addr + "/index.html")];
                    case 1:
                        _a.sent();
                        new __1.default(driver).analyze(function (err, results) {
                            if (err) {
                                // Something _should_ happen with error
                            }
                            chai_1.assert.isNotNull(results);
                            chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.violations);
                            chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.incomplete);
                            chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.passes);
                            chai_1.assert.isArray(results === null || results === void 0 ? void 0 : results.inapplicable);
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=test.js.map