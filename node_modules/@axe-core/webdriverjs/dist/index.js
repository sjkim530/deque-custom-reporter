"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var axe_core_1 = require("axe-core");
var utils_1 = require("./utils");
var axe_injector_1 = require("./axe-injector");
var AxeBuilder = /** @class */ (function () {
    function AxeBuilder(driver, axeSource, builderOptions) {
        this.driver = driver;
        this.axeSource = axeSource || axe_core_1.source;
        this.includes = [];
        this.excludes = [];
        this.option = {};
        this.config = null;
        this.builderOptions = builderOptions || {};
    }
    /**
     * Selector to include in analysis.
     * This may be called any number of times.
     * @param {String} selector
     * @returns {AxeBuilder}
     */
    AxeBuilder.prototype.include = function (selector) {
        this.includes.push(selector);
        return this;
    };
    /**
     * Selector to exclude in analysis.
     * This may be called any number of times.
     * @param {String} selector
     * @returns {AxeBuilder}
     */
    AxeBuilder.prototype.exclude = function (selector) {
        this.excludes.push(selector);
        return this;
    };
    /**
     * Set options to be passed into axe-core
     * @param {RunOptions} options
     * @returns {AxeBuilder}
     */
    AxeBuilder.prototype.options = function (options) {
        this.option = options;
        return this;
    };
    /**
     * Limit analysis to only the specified rules.
     * Cannot be used with `AxeBuilder#withTags`
     * @param {String|Array} rules
     * @returns {AxeBuilder}
     */
    AxeBuilder.prototype.withRules = function (rules) {
        rules = Array.isArray(rules) ? rules : [rules];
        /* istanbul ignore next */
        this.option = this.option || {};
        this.option.runOnly = {
            type: 'rule',
            values: rules
        };
        return this;
    };
    /**
     * Limit analysis to only specified tags.
     * Cannot be used with `AxeBuilder#withRules`
     * @param {String|Array} tags
     * @returns {AxeBuilder}
     */
    AxeBuilder.prototype.withTags = function (tags) {
        tags = Array.isArray(tags) ? tags : [tags];
        /* istanbul ignore next */
        this.option = this.option || {};
        this.option.runOnly = {
            type: 'tag',
            values: tags
        };
        return this;
    };
    /**
     * Set the list of rules to skip when running an analysis.
     * @param {String|Array} rules
     * @returns {AxeBuilder}
     */
    AxeBuilder.prototype.disableRules = function (rules) {
        rules = Array.isArray(rules) ? rules : [rules];
        /* istanbul ignore next */
        this.option = this.option || {};
        this.option.rules = {};
        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
            var rule = rules_1[_i];
            this.option.rules[rule] = { enabled: false };
        }
        return this;
    };
    /**
     * Set configuration for `axe-core`.
     * This value is passed directly to `axe.configure()`
     * @param {Spec} config
     * @returns {AxeBuilder | Error}
     */
    AxeBuilder.prototype.configure = function (config) {
        /* istanbul ignore if */
        if (typeof config !== 'object') {
            throw new Error('AxeBuilder needs an object to configure. See axe-core configure API.');
        }
        this.config = config;
        return this;
    };
    /**
     * Performs an analysis and retrieves results.
     * @param {CallbackFunction} callback
     * @returns {Promise<AxeResults>}
     */
    AxeBuilder.prototype.analyze = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            var driver, context, options, config, axeSource, injector;
            return __generator(this, function (_a) {
                driver = this.driver;
                context = utils_1.normalizeContext(this.includes, this.excludes);
                options = this.option;
                config = this.config;
                axeSource = this.axeSource;
                injector = new axe_injector_1.default({
                    driver: driver,
                    axeSource: axeSource,
                    config: config,
                    builderOptions: this.builderOptions
                });
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        injector.inject(function () {
                            driver
                                // https://github.com/vercel/pkg/issues/676
                                // we need to pass a string vs a function so we manually stringified the function
                                .executeAsyncScript("\n          const callback = arguments[arguments.length - 1];\n          const context = " + JSON.stringify(context) + " || document;\n          const options = " + JSON.stringify(options) + " || {};\n          const config = " + JSON.stringify(config) + " || null;\n          if (config) {\n            window.axe.configure(config);\n          }\n          window.axe.run(context, options).then(callback);\n        ")
                                .then(function (results) {
                                /* istanbul ignore if */
                                if (callback) {
                                    callback(null, results);
                                }
                                resolve(results);
                            })
                                .catch(function (err) {
                                // When using a callback, do *not* reject the wrapping Promise. This prevents having to handle the same error twice.
                                /* istanbul ignore else */
                                if (callback) {
                                    callback(err.message, null);
                                }
                                else {
                                    reject(err);
                                }
                            });
                        });
                    })];
            });
        });
    };
    return AxeBuilder;
}());
exports = module.exports = AxeBuilder;
exports.default = AxeBuilder;
//# sourceMappingURL=index.js.map